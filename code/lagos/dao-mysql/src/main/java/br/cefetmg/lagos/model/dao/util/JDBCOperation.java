package br.cefetmg.lagos.model.dao.util;

import br.cefetmg.lagos.model.dao.connections.ConnectionManager;
import br.cefetmg.lagos.model.dao.exceptions.PersistenceException;
import br.cefetmg.lagos.model.dto.base.DTO;
import br.cefetmg.lagos.model.dto.exceptions.DTOExeption;

import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class JDBCOperation<DataTransferObject extends DTO<DataTransferObject>> {
    private DTODb<DataTransferObject> dtoDb;

    private String sql;
    private int autoGeneratedKeys;
    private List<String> columnsPreparedStatement;
    private List<String> columnsResultSet;
    private List<DataTransferObject> dtos;

    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;

    public static PersistenceException handleExeption(Exception e) {
        e.printStackTrace();
        return new PersistenceException(e.getMessage(), e);
    }

    public JDBCOperation(DataTransferObject contextDto, String sql, int autoGeneratedKeys, List<String> columnsPreparedStatement,
                         List<String> columnsResultSet, List<DataTransferObject> dtos) throws PersistenceException {
        if (contextDto == null)
            throw new RuntimeException("You must pass a dto as context for this class.");

        this.sql = sql;
        this.autoGeneratedKeys = autoGeneratedKeys;
        this.columnsPreparedStatement = columnsPreparedStatement;
        this.columnsResultSet = columnsResultSet;
        this.dtos = dtos;
        dtoDb = new DTODb<>(contextDto);

        setConnection();
        setPreparedStatement();
    }

    private void setConnection() throws PersistenceException {
        try {
            connection = ConnectionManager.getInstance().getConnection();
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    private void setPreparedStatement() throws PersistenceException {
        assert connection != null;

        try {
            preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys);
            if (columnsPreparedStatement == null)
                return;
            int i = 1;
            for (DataTransferObject dto : dtos)
                i = dtoDb.setPreparedStatement(dto, preparedStatement, columnsPreparedStatement, i);
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public void executeUpdate() throws PersistenceException {
        try {
            preparedStatement.executeUpdate();
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public List<Long> getIds() throws PersistenceException {
        try {
            executeUpdate();
            ResultSet resultSet = preparedStatement.getGeneratedKeys();
            List<Long> ids = null;
            if (resultSet.next()) {
                ids = new ArrayList<>();
                int i = 1;
                do
                    ids.add(resultSet.getLong(i++));
                while (resultSet.next());
            }
            return ids;
        } catch (Exception e) {
            throw handleExeption(e);
        }

    }

    public Long getId() throws PersistenceException {
        try {
            executeUpdate();
            ResultSet resultSet = preparedStatement.getGeneratedKeys();
            Long id = null;
            if (resultSet.next())
                id = resultSet.getLong(1);
            return id;
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public void executeQuery() throws PersistenceException {
        try {
            resultSet = preparedStatement.executeQuery();
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public DataTransferObject getInstance() throws PersistenceException {
        try {
            if (columnsResultSet == null)
                throw new RuntimeException("Columns result set must be set in order to execute this method.");

            executeQuery();
            DataTransferObject dto = null;
            if (resultSet.next())
                dto = dtoDb.createWith(resultSet, columnsResultSet);
            return dto;
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public List<DataTransferObject> getInstances() throws PersistenceException {
        try {
            if (columnsResultSet == null)
                throw new RuntimeException("Columns result set must be set in order to execute this method.");

            executeQuery();
            ArrayList<DataTransferObject> dtos = new ArrayList<>();

            while (resultSet.next())
                dtos.add(dtoDb.createWith(resultSet, columnsResultSet));

            return dtos;
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public void close() throws PersistenceException {
        try {
            if (resultSet != null)
                resultSet.close();

            if (preparedStatement == null || connection == null)
                throw new RuntimeException("Connection or/and Prepared statement were unset.");

            preparedStatement.close();
            connection.close();
        } catch (Exception e) {
            throw handleExeption(e);
        }
    }

    public static class Builder<DataTransferObject extends DTO<DataTransferObject>> {
        private DataTransferObject contextDto;

        private String sql = "";
        private int autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        private List<String> columnsPreparedStatement = List.of();
        private List<String> columnsResultSet = List.of();
        private List<DataTransferObject> dtos = List.of();

        public Builder(DataTransferObject contextDto) {
            this.contextDto = contextDto;
        }

        public Builder<DataTransferObject> setSql(String sql) {
            this.sql = sql;
            return this;
        }

        public Builder<DataTransferObject> setColumnsPreparedStatement(List<String> columnsPreparedStatement, int autoGeneratedKeys, List<DataTransferObject> dtos) {
            this.columnsPreparedStatement = columnsPreparedStatement;
            this.autoGeneratedKeys = autoGeneratedKeys;
            this.dtos = dtos;
            return this;
        }

        public Builder<DataTransferObject> setColumnsPreparedStatement(List<String> columnsPreparedStatement, List<DataTransferObject> dtos) {
            return setColumnsPreparedStatement(columnsPreparedStatement, Statement.NO_GENERATED_KEYS, dtos);
        }

        public Builder<DataTransferObject> setColumnsPreparedStatement(List<String> columnsPreparedStatement, int autoGeneratedKeys, DataTransferObject dto) {
            return setColumnsPreparedStatement(columnsPreparedStatement, autoGeneratedKeys, List.of(dto));
        }

        public Builder<DataTransferObject> setColumnsPreparedStatement(List<String> columnsPreparedStatement, DataTransferObject dto) {
            return setColumnsPreparedStatement(columnsPreparedStatement, List.of(dto));
        }

        public Builder<DataTransferObject> setColumnsResultSet(List<String> columnsResultSet) {
            this.columnsResultSet = columnsResultSet;
            return this;
        }

        public JDBCOperation<DataTransferObject> build() throws PersistenceException {
            return new JDBCOperation<>(contextDto, sql, autoGeneratedKeys, columnsPreparedStatement, columnsResultSet, dtos);
        }

        public void executeUpdate() throws PersistenceException {
            JDBCOperation<DataTransferObject> operation = build();
            operation.executeUpdate();
        }

        public Long getId() throws PersistenceException {
            JDBCOperation<DataTransferObject> operation = build();
            Long id = operation.getId();
            operation.close();
            return id;
        }

        public List<Long> getIds() throws PersistenceException {
            JDBCOperation<DataTransferObject> operation = build();
            List<Long> ids = operation.getIds();
            operation.close();
            return ids;
        }

        public DataTransferObject getInstance() throws  PersistenceException {
            JDBCOperation<DataTransferObject> operation = build();
            DataTransferObject dto = operation.getInstance();
            operation.close();
            return dto;
        }

        public List<DataTransferObject> getInstances() throws PersistenceException {
            JDBCOperation<DataTransferObject> operation = build();
            List<DataTransferObject> dtos = operation.getInstances();
            operation.close();
            return dtos;
        }
    }
}
