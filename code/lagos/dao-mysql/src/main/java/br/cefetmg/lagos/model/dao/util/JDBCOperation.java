package br.cefetmg.lagos.model.dao.util;

import br.cefetmg.lagos.model.dao.connections.ConnectionManager;
import br.cefetmg.lagos.model.dto.DTO;

import java.lang.reflect.InvocationTargetException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JDBCOperation {
    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;
    private final DTOMethods dtoMethods;

    private List<String> columnsPreparedStatement;

    public JDBCOperation(DTOMethods dtoMethods, String sql, List<String> columnsPreparedStatement, int autoGeneratedKeys)
            throws SQLException, ClassNotFoundException {
        this.dtoMethods = dtoMethods;
        setConnection();
        setPreparedStatement(sql, columnsPreparedStatement, autoGeneratedKeys);
    }

    public JDBCOperation(DTOMethods dtoMethods, String sql, List<String> columnsPreparedStatement)
            throws SQLException, ClassNotFoundException {
        this.dtoMethods = dtoMethods;
        setConnection();
        setPreparedStatement(sql, columnsPreparedStatement);
    }

    private void setConnection() throws SQLException, ClassNotFoundException {
        connection = ConnectionManager.getInstance().getConnection();
    }

    private void setPreparedStatement(String sql, List<String> columnsPreparedStatement)
            throws SQLException {
        preparedStatement = connection.prepareStatement(sql);
        this.columnsPreparedStatement = columnsPreparedStatement;
    }

    private void setPreparedStatement(String sql, List<String> columnsPreparedStatement, int autoGeneratedKeys)
            throws SQLException {
        preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys);
        this.columnsPreparedStatement = columnsPreparedStatement;
    }

    public void executeUpdate(DTO dto) throws SQLException {
        dtoMethods.setPreparedStatement(dto, preparedStatement, columnsPreparedStatement);
        preparedStatement.executeUpdate();
    }

    public void executeUpdate(List<DTO> dtos) throws SQLException {
        int i = 1;
        for (DTO dto : dtos)
            i = dtoMethods.setPreparedStatement(dto, preparedStatement, columnsPreparedStatement, i);
        preparedStatement.executeUpdate();
    }

    public void executeQuery(DTO dto)
            throws SQLException {
        dtoMethods.setPreparedStatement(dto, preparedStatement, columnsPreparedStatement);
        executeQuery();
    }

    public void executeQuery()
            throws SQLException {
        resultSet = preparedStatement.executeQuery();
    }

    public List<Long> getIds() throws SQLException {
        ResultSet resultSet = preparedStatement.getGeneratedKeys();
        List<Long> ids = null;
        if (resultSet.next()) {
            ids = new ArrayList<>();
            int i = 1;
            do
                ids.add(resultSet.getLong(i++));
            while (resultSet.next());
        }
        return ids;
    }

    public Long getId() throws SQLException {
        List<Long> ids = getIds();
        if (ids == null)
            return null;
        return ids.get(0);
    }

    public List<? extends DTO> getInstances(List<String> columns) throws SQLException,
            InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        ArrayList<DTO> dtos = null;
        if (resultSet.next()) {
            dtos = new ArrayList<>();
            do
                dtos.add(dtoMethods.createWith(resultSet, columns));
            while (resultSet.next());
        }

        return dtos;
    }

    public DTO getInstance(List<String> columns) throws SQLException, InvocationTargetException,
            NoSuchMethodException, InstantiationException, IllegalAccessException {
        List<? extends DTO> dtos = getInstances(columns);
        if (dtos == null)
            return null;
        return dtos.get(0);
    }

    public void close() throws SQLException {
        if (resultSet != null)
            resultSet.close();
        preparedStatement.close();
        connection.close();
    }
}
